#' Misclassify variables in a data frame
#'
#' This function takes a data frame and a list of classification matrices,
#' and returns a new data frame with specified variables misclassified
#' according to the provided matrices.
#'
#' @param data A data frame containing the variables to be misclassified.
#'   The variables should be factors or character vectors.
#' @param class_mat A named list of classification matrices.
#'   The names should correspond to column names in the data frame.
#'   Each matrix should be square, with dimensions equal to the number of levels
#'   in the corresponding variable. The rows and columns should be named with the
#'   levels of the corresponding variable. The values represent probabilities of classification.
#'
#' @return A data frame with the same structure as the input, but with
#'   specified variables misclassified according to the provided matrices.
#'
#' @details
#' The function performs the following steps:
#' 1. Checks if the input is valid (data frame and list of matrices).
#' 2. Verifies that all specified columns exist in the data frame.
#' 3. For each specified column, it checks if the classification matrix
#'    matches the levels of the variable and adjusts if necessary.
#' 4. Applies the misclassification using the corresponding classification matrix.
#' 5. Returns the modified data frame with misclassified variables.
#'
#' The classification matrices are normalized so that each row sums to 1.
#' If a classification matrix contains levels not present in the data,
#' those rows and columns are removed. If the data contains levels not
#' present in the classification matrix, those levels are added with
#' a diagonal probability of 1 (no misclassification for those levels).
#'
#' @examples
#' # Create a larger sample dataset
#' set.seed(123)
#' data <- data.frame(
#'   Education = factor(sample(c("High School", "Bachelor's", "Master's", "PhD"),
#'                      1000, replace = TRUE)),
#'   Income = factor(sample(c("Low", "Medium", "High"),
#'                   1000, replace = TRUE, prob = c(0.3, 0.5, 0.2))),
#'   Age = factor(cut(rnorm(1000, mean = 40, sd = 15),
#'                    breaks = c(-Inf, 25, 35, 45, 55, Inf),
#'                    labels = c("18-25", "26-35", "36-45", "46-55", "55+")))
#' )
#'
#' # Define classification matrices
#' class_mat <- list(
#'   Education = matrix(
#'     c(0.7, 0.2, 0.1, 0.0,
#'       0.1, 0.6, 0.2, 0.1,
#'       0.0, 0.1, 0.7, 0.2,
#'       0.0, 0.0, 0.1, 0.9),
#'     nrow = 4,
#'     byrow = TRUE,
#'     dimnames = list(c("High School", "Bachelor's", "Master's", "PhD"),
#'                     c("High School", "Bachelor's", "Master's", "PhD"))
#'   ),
#'   Income = matrix(
#'     c(0.8, 0.2, 0.0,
#'       0.1, 0.7, 0.2,
#'       0.0, 0.2, 0.8),
#'     nrow = 3,
#'     byrow = TRUE,
#'     dimnames = list(c("Low", "Medium", "High"), c("Low", "Medium", "High"))
#'   ),
#'   Age = matrix(
#'     c(0.8, 0.2, 0.0, 0.0, 0.0,
#'       0.1, 0.7, 0.2, 0.0, 0.0,
#'       0.0, 0.1, 0.7, 0.2, 0.0,
#'       0.0, 0.0, 0.1, 0.8, 0.1,
#'       0.0, 0.0, 0.0, 0.2, 0.8),
#'     nrow = 5,
#'     byrow = TRUE,
#'     dimnames = list(c("18-25", "26-35", "36-45", "46-55", "55+"),
#'                     c("18-25", "26-35", "36-45", "46-55", "55+"))
#'   )
#' )
#'
#' # Apply misclassification
#' misclassified_data <- misclassify(data, class_mat)
#'
#' # Compare original and misclassified data for Education
#' education_comparison <- table(Original = data$Education,
#'                               Misclassified = misclassified_data$Education)
#' print("Education Misclassification Comparison:")
#' print(education_comparison)
#'
#' # Calculate misclassification rates for Education
#' education_rates <- prop.table(education_comparison, margin = 1)
#' print("\nEducation Misclassification Rates:")
#' print(round(education_rates, 2))
#'
#' # Compare with the original classification matrix for Education
#' print("\nOriginal Education Classification Matrix:")
#' print(round(class_mat$Education, 2))
#'
#' # Repeat for Income and Age if desired
#'
#' @export
misclassify <- function(data, class_mat) {
  # Check if data is a data frame
  if (!is.data.frame(data)) {
    stop("Input data must be a data frame")
  }

  # Check if class_mat is a list
  if (!is.list(class_mat)) {
    stop("class_mat must be a list")
  }

  # Check if all elements in class_mat are matrices
  if (!all(sapply(class_mat, is.matrix))) {
    stop("All elements in class_mat must be matrices")
  }

  # Check if all specified columns exist in the data frame
  if (!all(names(class_mat) %in% names(data))) {
    stop("Some specified columns do not exist in the data frame")
  }

  # Function to adjust classification matrix based on data levels
  adjust_matrix <- function(column, matrix) {
    data_levels <- levels(as.factor(column))
    matrix_levels <- rownames(matrix)

    if (is.null(matrix_levels) || !all(matrix_levels == colnames(matrix))) {
      stop("Classification matrix must have matching row and column names")
    }

    # Remove levels from matrix not present in data
    matrix <- matrix[matrix_levels %in% data_levels, matrix_levels %in% data_levels, drop = FALSE]

    # Add levels from data not present in matrix
    for (level in data_levels[!data_levels %in% matrix_levels]) {
      new_row <- rep(0, ncol(matrix))
      new_col <- c(rep(0, nrow(matrix)), 1)
      matrix <- rbind(matrix, new_row)
      matrix <- cbind(matrix, new_col)
      rownames(matrix)[nrow(matrix)] <- level
      colnames(matrix)[ncol(matrix)] <- level
    }

    # Ensure matrix rows and columns are in the same order as data levels
    matrix <- matrix[data_levels, data_levels]

    # Normalize rows
    matrix <- matrix / rowSums(matrix)

    return(matrix)
  }

  # Function to misclassify a single column
  misclassify_column <- function(column, matrix) {
    levels <- levels(as.factor(column))
    matrix <- adjust_matrix(column, matrix)

    misclassified <- sapply(column, function(x) {
      sample(levels, 1, prob = matrix[which(levels == x), ])
    })

    return(factor(misclassified, levels = levels))
  }

  # Apply misclassification to each specified column
  for (col_name in names(class_mat)) {
    data[[col_name]] <- misclassify_column(data[[col_name]], class_mat[[col_name]])
  }

  return(data)
}
